DROP TABLE IF EXISTS users, items, bookings, item_request, comments;

CREATE TABLE IF NOT EXISTS users (
    id    BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name  VARCHAR(255) NOT NULL,
    email VARCHAR(320) NOT NULL,
    CONSTRAINT users_email_key UNIQUE (email),
    CONSTRAINT users_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS item_request (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    description VARCHAR(500) NOT NULL,
    requestor_id BIGINT,
    created TIMESTAMP NOT NULL,
    CONSTRAINT item_request_pkey PRIMARY KEY (id),
    CONSTRAINT item_request_requestor_id_fkey FOREIGN KEY (requestor_id) REFERENCES users (id)
);

CREATE TABLE IF NOT EXISTS items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR (255) NOT NULL,
    description VARCHAR(500) NOT NULL,
    is_available BOOLEAN,
    owner_id BIGINT NOT NULL,
    request_id BIGINT,
    CONSTRAINT items_pkey PRIMARY KEY (id),
    CONSTRAINT items_owner_id_fkey FOREIGN KEY (owner_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT items_fk FOREIGN KEY (request_id) REFERENCES public.item_request(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS bookings (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    start_date TIMESTAMP WITHOUT TIME ZONE,
    end_date TIMESTAMP WITHOUT TIME ZONE,
    item_id BIGINT NOT NULL,
    booker_id BIGINT NOT NULL,
    status VARCHAR (10),
    CONSTRAINT bookings_pkey PRIMARY KEY (id),
    CONSTRAINT bookings_booker_id_fkey FOREIGN KEY (booker_id) REFERENCES users (id),
    CONSTRAINT bookings_item_id_fkey FOREIGN KEY (item_id) REFERENCES items (id)
);

CREATE TABLE IF NOT EXISTS comments (
    id        BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    text      VARCHAR(1000) NOT NULL,
    item_id   BIGINT NOT NULL,
    author_id BIGINT NOT NULL,
    created TIMESTAMP NOT NULL,
    CONSTRAINT comments_pkey PRIMARY KEY (id),
    CONSTRAINT comments_item_id_fkey FOREIGN KEY (item_id) REFERENCES items (id),
    CONSTRAINT comments_author_id_fkey FOREIGN KEY (author_id) REFERENCES users (id)
);
